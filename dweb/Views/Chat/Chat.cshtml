
@* View responsável pelo chat de mensagens entre utilizadores *@
@model List<dweb.Models.Mensagem>
@using System.Text.Json


<div class="container-fluid d-flex flex-column align-items-center justify-content-center" style="min-height: 80vh;">
    <div class="titulo mb-4">
        <h2 class="fw-bold" style="color:#2980b9; letter-spacing:1px;">Chat de Mensagens</h2>
    </div>

    @* Caixa de mensagens *@
    <div id="chatBox" class="chat-box shadow-lg mb-3" style="background: #fff; border-radius: 1.5rem; width: 100%; max-width: 900px; min-height: 500px; height: 500px; overflow-y: auto; padding: 2.5rem;">
        @if (Model == null || !Model.Any())
        {
            <p>Não existem mensagens disponíveis.</p>
        }
        else
        {
            // Mostra cada mensagem do chat
            foreach (var msg in Model)
            {
                var isOwn = msg.UserID?.ToString() == (ViewData["UserID"]?.ToString() ?? "");
                <div class="message @(isOwn ? "own" : "other")">
                    <form asp-action="DeleteMensagemForm" asp-controller="Men" method="post" style="background: transparent; border: none; margin:0; padding:0;">
                        <div class="username">@((msg.User?.UserName) ?? "Anónimo")</div>
                        <div>@msg.conteudo</div>
                        <div class="timestamp">@msg.timestamp.ToShortTimeString() @msg.timestamp.Date.Day/@msg.timestamp.Date.Month/@msg.timestamp.Date.Year</div>
                        <input type="hidden" name="id" value="@msg.mensagemID" />
                        @if (User.IsInRole("Administrador"))
                        {
                            <button type="submit" class="btn btn-sm btn-danger mt-2">Apagar</button>
                        }
                    </form>
                </div>
            }
        }
    </div>

    @* Zone de input para enviar mensagens *@
    <div class="input-container w-100 d-flex justify-content-center align-items-center" style="max-width: 900px;">
        <input type="text" id="messageInput" placeholder="Escrever..." autocomplete="off" class="form-control me-2 shadow-sm" style="border-radius: 1.5rem;" />
        @if (User.Identity.IsAuthenticated){
            <button onclick="sendMessage()" class="btn fw-bold px-4 py-2" style="border-radius: 1.5rem; background: linear-gradient(90deg,#2980b9,#6dd5fa); color:white; border:none;">Enviar</button>
        }
        else
        {
            <form asp-action="Login" asp-controller="Auth" method="get">
                <button class="btn fw-bold px-4 py-2" style="border-radius: 1.5rem; background: linear-gradient(90deg,#2980b9,#6dd5fa); color:white; border:none;">Enviar</button>
            </form>
        }
    </div>
</div>

<style>
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: #f8f9fa;
    }
    .titulo h2 {
        color: #2980b9;
        font-weight: 700;
    }
    .chat-box {
        background: #fff;
        border-radius: 1.5rem;
        box-shadow: 0 0 20px rgba(41,128,185,0.08);
    }
    .message {
        max-width: 70%;
        margin-bottom: 14px;
        padding: 12px 18px;
        border-radius: 1.2rem;
        line-height: 1.5;
        font-size: 15px;
        word-wrap: break-word;
        box-shadow: 0 1px 6px rgba(41,128,185,0.07);
        color: #333;
    }
    .message .username {
        font-weight: 600;
        margin-bottom: 3px;
        font-size: 12px;
        color: #2980b9;
    }
    .message.own {
        background: linear-gradient(90deg,#2980b9,#6dd5fa);
        color: #fff;
        margin-left: auto;
        border-bottom-right-radius: 0.2rem;
    }
    .message.own .username {
        color: #fff;
    }
    .message.other {
        background: #e0e0e0;
        color: #333;
        margin-right: auto;
        border-bottom-left-radius: 0.2rem;
    }
    .message .timestamp {
        font-size: 11px;
        color: #fff;
        text-align: right;
        margin-top: 5px;
    }
    .input-container input[type="text"] {
        border-radius: 1.5rem;
        border: 1px solid #b0c4de;
        font-size: 15px;
        padding: 12px 18px;
        transition: border-color 0.3s;
    }
    .input-container input[type="text"]:focus {
        border-color: #2980b9;
        box-shadow: 0 0 5px #2980b9;
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    const userID = @Html.Raw(JsonSerializer.Serialize(ViewData["UserID"] ?? ""));

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chathub")
        .build();

    connection.on("ReceiveMessage", function (message) {
        location.reload();
    });

    connection.start().catch(function (err) {
        console.error(err.toString());
    });

    async function sendMessage() {
        const input = document.getElementById("messageInput");
        const message = input.value.trim();
        if (!message) return;

        try {
            const novaMensagem = {
                conteudo: message,
                UserID: userID
            };

            const response = await fetch('/api/Mensagem', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(novaMensagem)
            });

            if (!response.ok) {
                throw new Error('Erro ao enviar mensagem');
            }

            input.value = '';
        } catch (err) {
            console.error(err);
        }
    }
</script>
